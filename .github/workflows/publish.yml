name: Publish
on:
  push:
    branches: [ "main" ]

jobs:
  build-registry-client:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-musl
            binary: registry-client-linux-x86_64
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-musl
            binary: registry-client-linux-aarch64
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            binary: registry-client-macos-x86_64
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            binary: registry-client-macos-aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          persist-credentials: false
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - if: ${{ runner.os == 'Linux' && matrix.arch == 'x86_64' }}
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      - if: ${{ runner.os == 'Linux' && matrix.arch == 'aarch64' }}
        run: cargo install cross
      - if: ${{ runner.os == 'Linux' && matrix.arch == 'aarch64' }}
        run: cd contracts/contracts/solana/client-rs/registry && cross build --target ${{ matrix.target }} --release
      - if: ${{ !(runner.os == 'Linux' && matrix.arch == 'aarch64') }}
        run: cd contracts/contracts/solana/client-rs/registry && cargo build --target ${{ matrix.target }} --release
      - run: mv contracts/contracts/solana/target/${{ matrix.target }}/release/registry-client contracts/contracts/solana/target/${{ matrix.target }}/release/${{ matrix.binary }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}
          path: contracts/contracts/solana/target/${{ matrix.target }}/release/${{ matrix.binary }}
          if-no-files-found: error

  build-python:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest
    needs: [build-registry-client]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          persist-credentials: false
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: leea_agent_sdk/registry-client
          merge-multiple: true
      - name: List registry client binaries
        run: ls -la leea_agent_sdk/registry-client
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: python3 -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build-python
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/leea-agent-sdk
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Sign
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release create "$GITHUB_REF_NAME" --repo "$GITHUB_REPOSITORY" --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload "$GITHUB_REF_NAME" dist/** --repo "$GITHUB_REPOSITORY"
